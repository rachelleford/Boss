
//
//  NewRecording.swift
//  BossNation
//
//  Created by Rachelle Ford on 6/5/23.
//

import SwiftUI
import AVKit

struct NewRecording: View {
    @StateObject var cameraModel = CameraViewModel()
    @Environment(\.dismiss) var dismiss
    @SceneStorage("create_video") var isNewVideo: Bool = false
    @State private var showImagePicker = false
    
    var body: some View {
        ZStack(alignment: .bottom) {
            // MARK: Camera View
            CameraView()
                .environmentObject(cameraModel)
                .clipShape(RoundedRectangle(cornerRadius: 30, style: .continuous))
            
            // MARK: Controls
            ZStack{
                Button {
                    // Handle live photo button action
                } label: {
                    Image(systemName: "tray.and.arrow.up.fill")
                        .font(.system(size: 30))
                        .foregroundColor(.white)
                        .frame(width: 60, height: 60)
                        .background(Color.red)
                        .cornerRadius(30)
                }
                .offset(x: 70, y: 0) // Adjust the offset as per your desired position
                .onTapGesture {
                    showImagePicker.toggle()
                } // Adjust the offset as per your desired position
            
                Button {
                    if cameraModel.isRecording{
                        cameraModel.stopRecording()
                    }
                    else{
                        cameraModel.startRecording()
                    }
                } label: {
                    Circle()
                        .fill(Color.red.opacity(0.6))
                        .frame(width: 60, height: 60)
                        .overlay{
                            Circle()
                                .fill(Color.red)
                                .padding(cameraModel.isRecording ? 0 : 5)
                                .animation(.easeInOut, value: cameraModel.isRecording)
                        }
                }
                
                // Preview Button
                Button {
                    if let _ = cameraModel.previewURL{
                        cameraModel.showPreview.toggle()
                        cameraModel.session.stopRunning()
                    }
                } label: {
                    Group{
                        if cameraModel.previewURL == nil && !cameraModel.recordedURLs.isEmpty{
                            // Merging Videos
                            ProgressView()
                                .tint(.white)
                        }
                        else{
                            Label {
                                Image(systemName: "chevron.right")
                                    .font(.callout)
                            } icon: {
                                Text("Preview")
                            }
                            .foregroundColor(.red)
                        }
                    }
                    .padding(.horizontal,20)
                    .padding(.vertical,8)
                    .background{
                        Capsule()
                            .fill(.white)
                    }
                }
                .frame(maxWidth: .infinity,alignment: .trailing)
                .padding(.trailing)
                .opacity((cameraModel.previewURL == nil && cameraModel.recordedURLs.isEmpty) || cameraModel.isRecording ? 0 : 1)
                
                Button {
                                    // Handle live photo button action
                } label: {
                    Image(systemName: "livephoto.play")
                        .font(.system(size: 30))
                        .foregroundColor(.white)
                        .frame(width: 60, height: 60)
                        .background(Color.red)
                        .cornerRadius(30)
                }
                .offset(x: 70, y: 0) // Adjust the offset as per your desired position
                .opacity(cameraModel.isRecording ? 0 : 1)
            }
            .frame(maxHeight: .infinity,alignment: .bottom)
            .padding(.bottom,10)
            .padding(.bottom,60)
            
            Button {
                cameraModel.session.stopRunning()
                dismiss()
                isNewVideo = false
            } label: {
                Image(systemName: "xmark")
                    .font(.title)
                    .foregroundColor(.white)
            }
            .frame(maxWidth: .infinity,maxHeight: .infinity,alignment: .topLeading)
            .padding()
            .padding(.top)
            .opacity(cameraModel.isRecording ? 0 : 1)
            
            Button {
                cameraModel.recordedDuration = 0
                cameraModel.previewURL = nil
                cameraModel.recordedURLs.removeAll()
            } label: {
                Image(systemName: "memories")
                    .font(.title)
                    .foregroundColor(.white)
            }
            .frame(maxWidth: .infinity,maxHeight: .infinity,alignment: .topTrailing)
            .padding()
            .padding(.top)
            .opacity(!cameraModel.recordedURLs.isEmpty && cameraModel.previewURL != nil && !cameraModel.isRecording ? 1 : 0)
        }
        .overlay(content: {
            if let url = cameraModel.previewURL,cameraModel.showPreview{
                VideoPreview(url: url, showPreview: $cameraModel.showPreview)
                    .transition(.move(edge: .trailing))
                    .onDisappear {
                        cameraModel.session.startRunning()
                    }
            }
        })
        .animation(.easeInOut, value: cameraModel.showPreview)
        .preferredColorScheme(.dark)
    }
}
